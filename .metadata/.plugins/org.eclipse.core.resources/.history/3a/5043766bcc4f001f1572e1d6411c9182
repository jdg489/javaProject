package Soccer;

import java.util.Calendar;
import java.util.Scanner;

public class SoccerMenu {
	Scanner sc = new Scanner(System.in);
	DatePrinter dp = new DatePrinter();
	
	public void mainMenu() {
		System.out.println("사커게임에 오신걸 환영합니다.");
		
		while(true) {
			System.out.println("메인메뉴");
			System.out.println("1. 회원가입 ");
			System.out.println("2. 계정생성");
			System.out.println("3. 계정삭제");
			System.out.println("9. 종료");
			
			int choice = sc.nextInt();
			sc.nextLine();
			
				switch(choice) {
				case 1:
					Membership();
					break;
				case 2:
					break;
				case 3:
					break;
				case 9:
					return;
				default:
					System.out.println("잘못된 입력입니다. 다시 입력해주세요.");
				}
		}
	}

	private void Membership() {
		private static Membership m;
	    private Scanner sc = new Scanner(System.in);
	    
	    public static Membership getInstance() {
	        if (m == null) {
	            m = new Membership();
	        }
	        return m;
	    }

	    public static void freeInstance() {
	        m = null;
	    }

	    private Membership() {}
	    
	    String name; // 이름
	    String personalYY; // 태어난 년도
	    String personalMM; // 태어난 월
	    String personalDD; // 태어난 일
	    String email; // 이메일
	    String address; // 주소
	    String pw; // 카드 비밀번호

	    // 회원가입 안내
	    public void membershipGuide() {
	        System.out.println("안녕하세요 낙슨입니다.\n회원가입을 진행하시겠습니까?\n[1]예 \t [2]아니요");
	        
	        while (true) {
	            System.out.print("\n입력 : ");
	            String answer = sc.next();
	            
	            if (answer.equals("1") || answer.equals("예")) {
	                personalData();
	                return;
	            } else if (answer.equals("2") || answer.equals("아니요")) {
	                System.out.println("회원이 아니면 로그인 할 수 없습니다.");
	                System.exit(0); // 프로그램 종료
	            } else {
	                System.out.println("잘못된 입력입니다. 다시 입력해주세요.");
	            }
	        }
	    }

	    public void personalData() {
	        System.out.println("회원 가입 양식을 작성해주세요");
	        
	        System.out.print("이름 : ");
	        this.name = sc.next();
	        
	        int personalYYnum = 0;
	        int personalMMnum = 0;
	        int personalDDnum = 0;

	        Calendar cal = Calendar.getInstance();
	        int yy = cal.get(Calendar.YEAR);

	        while (true) {
	            System.out.print("태어난 연도 : ");
	            this.personalYY = sc.next();
	            
	            try {
	                personalYYnum = Integer.parseInt(personalYY);

	                if (personalYYnum == yy || (personalYYnum > yy - 20 && personalYYnum < yy)) {
	                    System.out.println("미성년자는 부모 동의가 있어야 합니다.");
	                } else if (personalYYnum < 1900 || personalYYnum > yy) {
	                    System.out.println("잘못된 입력입니다.\n태어난 연도를 다시 입력해주세요.");
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("잘못된 입력입니다. 숫자만 입력해주세요.");
	            }
	        }

	        while (true) {
	            System.out.print("태어난 월 : ");
	            this.personalMM = sc.next();
	            
	            try {
	                personalMMnum = Integer.parseInt(personalMM);

	                if (personalMMnum < 1 || personalMMnum > 12) {
	                    System.out.println("잘못된 입력입니다. 태어난 월을 다시 입력해주세요.");
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("잘못된 입력입니다. 숫자만 입력해주세요.");
	            }
	        }

	        // 입력한 월에 따른 일의 수 계산
	        cal.set(Calendar.YEAR, personalYYnum);
	        cal.set(Calendar.MONTH, personalMMnum - 1); // 월은 0부터 시작
	        int day_count = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

	        while (true) {
	            System.out.print("태어난 일 : ");
	            this.personalDD = sc.next();
	            
	            try {
	                personalDDnum = Integer.parseInt(personalDD);

	                if (personalDDnum < 1 || personalDDnum > day_count) {
	                    System.out.println("잘못된 입력입니다. 태어난 일을 다시 입력해주세요.");
	                } else {
	                    break;
	                }
	            } catch (NumberFormatException e) {
	                System.out.println("잘못된 입력입니다. 숫자만 입력해주세요.");
	            }
	        }

	        while (true) {
	            System.out.print("이메일 : ");
	            this.email = sc.next();
	            
	            // 이메일 형식 검증
	            if (isValidEmail(this.email)) {
	                break;
	            } else {
	                System.out.println("잘못된 이메일 형식입니다. 다시 입력해주세요.");
	            }
	        }

	        while (true) {
	            System.out.print("주소 : ");
	            this.address = sc.next();
	            
	            // 주소에 숫자가 포함된 경우 예외 처리
	            if (this.address.matches(".*\\d.*")) {
	                System.out.println("주소에 숫자는 포함될 수 없습니다. 다시 입력해주세요.");
	            } else {
	                break;
	            }
	        }

	        while (true) {
	            System.out.print("비밀번호 : ");
	            sc.nextLine(); // next() 오류 방지
	            this.pw = sc.next();
	            
	            // 비밀번호 검증: 대문자, 소문자, 숫자, 특수문자 포함, 길이 8-20자
	            if (isValidPassword(this.pw)) {
	                break;
	            } else {
	                System.out.println("비밀번호는 다음 조건을 충족해야 합니다: \n"
	                        + "- 대문자 1개 이상 \n"
	                        + "- 소문자 1개 이상 \n"
	                        + "- 숫자 1개 이상 \n"
	                        + "- 특수 문자 1개 이상 \n"
	                        + "- 8자 이상 20자 이하");
	            }
	        }

	        System.out.println("회원가입이 완료되었습니다.");
	    }

	    // 비밀번호 유효성 검사 메서드
	    private boolean isValidPassword(String password) {
	        // 정규 표현식: 대문자, 소문자, 숫자, 특수문자 포함 및 길이 검증
	        return password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,20}$");
	    }

	    // 이메일 유효성 검사 메서드
	    private boolean isValidEmail(String email) {
	        // 정규 표현식: 일반적인 이메일 형식 검증
	        return email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");		
	}
}
